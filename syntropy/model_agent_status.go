/*
Syntropy network API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@syntropynet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syntropy

import (
	"encoding/json"
	"fmt"
)

// AgentStatus the model 'AgentStatus'
type AgentStatus string

// List of AgentStatus
const (
	AGENTSTATUS_OK                          AgentStatus = "OK"
	AGENTSTATUS_WG_ERROR                    AgentStatus = "WG_ERROR"
	AGENTSTATUS_DUPLICATE_NAME_ERROR        AgentStatus = "DUPLICATE_NAME_ERROR"
	AGENTSTATUS_AGENT_TAG_WHITELIST_WARNING AgentStatus = "AGENT_TAG_WHITELIST_WARNING"
)

// All allowed values of AgentStatus enum
var AllowedAgentStatusEnumValues = []AgentStatus{
	"OK",
	"WG_ERROR",
	"DUPLICATE_NAME_ERROR",
	"AGENT_TAG_WHITELIST_WARNING",
}

func (v *AgentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AgentStatus(value)
	for _, existing := range AllowedAgentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AgentStatus", value)
}

// NewAgentStatusFromValue returns a pointer to a valid AgentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAgentStatusFromValue(v string) (*AgentStatus, error) {
	ev := AgentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AgentStatus: valid values are %v", v, AllowedAgentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AgentStatus) IsValid() bool {
	for _, existing := range AllowedAgentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AgentStatus value
func (v AgentStatus) Ptr() *AgentStatus {
	return &v
}

type NullableAgentStatus struct {
	value *AgentStatus
	isSet bool
}

func (v NullableAgentStatus) Get() *AgentStatus {
	return v.value
}

func (v *NullableAgentStatus) Set(val *AgentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentStatus(val *AgentStatus) *NullableAgentStatus {
	return &NullableAgentStatus{value: val, isSet: true}
}

func (v NullableAgentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
