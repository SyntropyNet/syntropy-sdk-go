/*
Syntropy network API

Testing AuthApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package syntropy

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_syntropy_AuthApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AuthApiService V1NetworkAuthAccessTokensCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthApi.V1NetworkAuthAccessTokensCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthApiService V1NetworkAuthAccessTokensDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessTokenId string

		httpRes, err := apiClient.AuthApi.V1NetworkAuthAccessTokensDelete(context.Background(), accessTokenId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthApiService V1NetworkAuthAccessTokensGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthApi.V1NetworkAuthAccessTokensGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthApiService V1NetworkAuthAccessTokensPermissionsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthApi.V1NetworkAuthAccessTokensPermissionsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthApiService V1NetworkAuthAgentTokensCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthApi.V1NetworkAuthAgentTokensCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthApiService V1NetworkAuthAgentTokensDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentTokenId int32

		httpRes, err := apiClient.AuthApi.V1NetworkAuthAgentTokensDelete(context.Background(), agentTokenId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthApiService V1NetworkAuthAgentTokensGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthApi.V1NetworkAuthAgentTokensGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
