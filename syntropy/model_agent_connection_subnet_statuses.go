/*
Syntropy network API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@syntropynet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syntropy

import (
	"encoding/json"
	"fmt"
)

// AgentConnectionSubnetStatuses the model 'AgentConnectionSubnetStatuses'
type AgentConnectionSubnetStatuses string

// List of AgentConnectionSubnetStatuses
const (
	AGENTCONNECTIONSUBNETSTATUSES_OK      AgentConnectionSubnetStatuses = "OK"
	AGENTCONNECTIONSUBNETSTATUSES_PENDING AgentConnectionSubnetStatuses = "PENDING"
	AGENTCONNECTIONSUBNETSTATUSES_ERROR   AgentConnectionSubnetStatuses = "ERROR"
)

// All allowed values of AgentConnectionSubnetStatuses enum
var AllowedAgentConnectionSubnetStatusesEnumValues = []AgentConnectionSubnetStatuses{
	"OK",
	"PENDING",
	"ERROR",
}

func (v *AgentConnectionSubnetStatuses) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AgentConnectionSubnetStatuses(value)
	for _, existing := range AllowedAgentConnectionSubnetStatusesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AgentConnectionSubnetStatuses", value)
}

// NewAgentConnectionSubnetStatusesFromValue returns a pointer to a valid AgentConnectionSubnetStatuses
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAgentConnectionSubnetStatusesFromValue(v string) (*AgentConnectionSubnetStatuses, error) {
	ev := AgentConnectionSubnetStatuses(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AgentConnectionSubnetStatuses: valid values are %v", v, AllowedAgentConnectionSubnetStatusesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AgentConnectionSubnetStatuses) IsValid() bool {
	for _, existing := range AllowedAgentConnectionSubnetStatusesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AgentConnectionSubnetStatuses value
func (v AgentConnectionSubnetStatuses) Ptr() *AgentConnectionSubnetStatuses {
	return &v
}

type NullableAgentConnectionSubnetStatuses struct {
	value *AgentConnectionSubnetStatuses
	isSet bool
}

func (v NullableAgentConnectionSubnetStatuses) Get() *AgentConnectionSubnetStatuses {
	return v.value
}

func (v *NullableAgentConnectionSubnetStatuses) Set(val *AgentConnectionSubnetStatuses) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentConnectionSubnetStatuses) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentConnectionSubnetStatuses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentConnectionSubnetStatuses(val *AgentConnectionSubnetStatuses) *NullableAgentConnectionSubnetStatuses {
	return &NullableAgentConnectionSubnetStatuses{value: val, isSet: true}
}

func (v NullableAgentConnectionSubnetStatuses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentConnectionSubnetStatuses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
