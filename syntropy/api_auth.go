/*
Syntropy network API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@syntropynet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syntropy

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// AuthApiService AuthApi service
type AuthApiService service

type ApiV1NetworkAuthAccessTokensCreateRequest struct {
	ctx                                    context.Context
	ApiService                             *AuthApiService
	v1NetworkAuthAccessTokensCreateRequest *V1NetworkAuthAccessTokensCreateRequest
}

func (r ApiV1NetworkAuthAccessTokensCreateRequest) V1NetworkAuthAccessTokensCreateRequest(v1NetworkAuthAccessTokensCreateRequest V1NetworkAuthAccessTokensCreateRequest) ApiV1NetworkAuthAccessTokensCreateRequest {
	r.v1NetworkAuthAccessTokensCreateRequest = &v1NetworkAuthAccessTokensCreateRequest
	return r
}

func (r ApiV1NetworkAuthAccessTokensCreateRequest) Execute() (*V1NetworkAuthAccessTokensCreateResponse, *http.Response, error) {
	return r.ApiService.V1NetworkAuthAccessTokensCreateExecute(r)
}

/*
V1NetworkAuthAccessTokensCreate Create Access token

To be able to create a new `access token` you need to [create one in the platform's UI](https://docs.syntropystack.com/docs/access-tokens). This endpoint will provide `access_token` value only once. Make sure that you provide the right set of `permissions`, you can list all of them using [Get Access token permissions](https://docs.syntropystack.com/reference/v1networkauthaccesstokenspermissionsget) endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1NetworkAuthAccessTokensCreateRequest
*/
func (a *AuthApiService) V1NetworkAuthAccessTokensCreate(ctx context.Context) ApiV1NetworkAuthAccessTokensCreateRequest {
	return ApiV1NetworkAuthAccessTokensCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return V1NetworkAuthAccessTokensCreateResponse
func (a *AuthApiService) V1NetworkAuthAccessTokensCreateExecute(r ApiV1NetworkAuthAccessTokensCreateRequest) (*V1NetworkAuthAccessTokensCreateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *V1NetworkAuthAccessTokensCreateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthApiService.V1NetworkAuthAccessTokensCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/network/auth/access-tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1NetworkAuthAccessTokensCreateRequest == nil {
		return localVarReturnValue, nil, reportError("v1NetworkAuthAccessTokensCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1NetworkAuthAccessTokensCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accessToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V1ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v V1ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1NetworkAuthAccessTokensDeleteRequest struct {
	ctx           context.Context
	ApiService    *AuthApiService
	accessTokenId string
}

func (r ApiV1NetworkAuthAccessTokensDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1NetworkAuthAccessTokensDeleteExecute(r)
}

/*
V1NetworkAuthAccessTokensDelete Delete Access token

Deletes Access token.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accessTokenId
 @return ApiV1NetworkAuthAccessTokensDeleteRequest
*/
func (a *AuthApiService) V1NetworkAuthAccessTokensDelete(ctx context.Context, accessTokenId string) ApiV1NetworkAuthAccessTokensDeleteRequest {
	return ApiV1NetworkAuthAccessTokensDeleteRequest{
		ApiService:    a,
		ctx:           ctx,
		accessTokenId: accessTokenId,
	}
}

// Execute executes the request
func (a *AuthApiService) V1NetworkAuthAccessTokensDeleteExecute(r ApiV1NetworkAuthAccessTokensDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthApiService.V1NetworkAuthAccessTokensDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/network/auth/access-tokens/{access_token_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"access_token_id"+"}", url.PathEscape(parameterValueToString(r.accessTokenId, "accessTokenId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accessToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V1ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v V1ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1NetworkAuthAccessTokensGetRequest struct {
	ctx        context.Context
	ApiService *AuthApiService
	skip       *int32
	take       *int32
	order      *string
}

// Number of tokens to skip.
func (r ApiV1NetworkAuthAccessTokensGetRequest) Skip(skip int32) ApiV1NetworkAuthAccessTokensGetRequest {
	r.skip = &skip
	return r
}

// Limit of returned access tokens.
func (r ApiV1NetworkAuthAccessTokensGetRequest) Take(take int32) ApiV1NetworkAuthAccessTokensGetRequest {
	r.take = &take
	return r
}

// Order: ascending or descending
func (r ApiV1NetworkAuthAccessTokensGetRequest) Order(order string) ApiV1NetworkAuthAccessTokensGetRequest {
	r.order = &order
	return r
}

func (r ApiV1NetworkAuthAccessTokensGetRequest) Execute() (*V1NetworkAuthAccessTokensGetResponse, *http.Response, error) {
	return r.ApiService.V1NetworkAuthAccessTokensGetExecute(r)
}

/*
V1NetworkAuthAccessTokensGet Get Access tokens

Gets a list of all `access tokens`, filtered and ordered according to the `order` (`ASC` or `DESC` for `access_token_name` or `access_token_expiration`, eg. `access_token_name:ASC`) conditions provided in the request. The response may contain fewer results than `take`  or `skip` number.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1NetworkAuthAccessTokensGetRequest
*/
func (a *AuthApiService) V1NetworkAuthAccessTokensGet(ctx context.Context) ApiV1NetworkAuthAccessTokensGetRequest {
	return ApiV1NetworkAuthAccessTokensGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return V1NetworkAuthAccessTokensGetResponse
func (a *AuthApiService) V1NetworkAuthAccessTokensGetExecute(r ApiV1NetworkAuthAccessTokensGetRequest) (*V1NetworkAuthAccessTokensGetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *V1NetworkAuthAccessTokensGetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthApiService.V1NetworkAuthAccessTokensGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/network/auth/access-tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.skip != nil {
		parameterAddToQuery(localVarQueryParams, "skip", r.skip, "")
	}
	if r.take != nil {
		parameterAddToQuery(localVarQueryParams, "take", r.take, "")
	}
	if r.order != nil {
		parameterAddToQuery(localVarQueryParams, "order", r.order, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accessToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V1ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v V1ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1NetworkAuthAccessTokensPermissionsGetRequest struct {
	ctx        context.Context
	ApiService *AuthApiService
	skip       *int32
	take       *int32
}

// Number of permission to be skipped.
func (r ApiV1NetworkAuthAccessTokensPermissionsGetRequest) Skip(skip int32) ApiV1NetworkAuthAccessTokensPermissionsGetRequest {
	r.skip = &skip
	return r
}

// Limit the number of returned permissions.
func (r ApiV1NetworkAuthAccessTokensPermissionsGetRequest) Take(take int32) ApiV1NetworkAuthAccessTokensPermissionsGetRequest {
	r.take = &take
	return r
}

func (r ApiV1NetworkAuthAccessTokensPermissionsGetRequest) Execute() (*V1NetworkAuthAccessTokensPermissionsGetResponse, *http.Response, error) {
	return r.ApiService.V1NetworkAuthAccessTokensPermissionsGetExecute(r)
}

/*
V1NetworkAuthAccessTokensPermissionsGet Get Access token permissions

Lists all available permissions for access tokens with their names, description and id, eg.
```
{
	"permission_id": 1,
	"permission_name": "platform.agent-groups.read",
	"permission_description": "Read agent groups"
}
```

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1NetworkAuthAccessTokensPermissionsGetRequest
*/
func (a *AuthApiService) V1NetworkAuthAccessTokensPermissionsGet(ctx context.Context) ApiV1NetworkAuthAccessTokensPermissionsGetRequest {
	return ApiV1NetworkAuthAccessTokensPermissionsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return V1NetworkAuthAccessTokensPermissionsGetResponse
func (a *AuthApiService) V1NetworkAuthAccessTokensPermissionsGetExecute(r ApiV1NetworkAuthAccessTokensPermissionsGetRequest) (*V1NetworkAuthAccessTokensPermissionsGetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *V1NetworkAuthAccessTokensPermissionsGetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthApiService.V1NetworkAuthAccessTokensPermissionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/network/auth/access-tokens/permissions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.skip != nil {
		parameterAddToQuery(localVarQueryParams, "skip", r.skip, "")
	}
	if r.take != nil {
		parameterAddToQuery(localVarQueryParams, "take", r.take, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accessToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V1ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v V1ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1NetworkAuthAgentTokensCreateRequest struct {
	ctx                                   context.Context
	ApiService                            *AuthApiService
	v1NetworkAuthAgentTokensCreateRequest *V1NetworkAuthAgentTokensCreateRequest
}

func (r ApiV1NetworkAuthAgentTokensCreateRequest) V1NetworkAuthAgentTokensCreateRequest(v1NetworkAuthAgentTokensCreateRequest V1NetworkAuthAgentTokensCreateRequest) ApiV1NetworkAuthAgentTokensCreateRequest {
	r.v1NetworkAuthAgentTokensCreateRequest = &v1NetworkAuthAgentTokensCreateRequest
	return r
}

func (r ApiV1NetworkAuthAgentTokensCreateRequest) Execute() (*V1NetworkAuthAgentTokensCreateResponse, *http.Response, error) {
	return r.ApiService.V1NetworkAuthAgentTokensCreateExecute(r)
}

/*
V1NetworkAuthAgentTokensCreate Create Agent Token

Creates Agent Token. To start using `Agent` you need to set up an `Agent token` by using this endpoint. You can also [create it in UI](https://docs.syntropystack.com/docs/get-your-agent-token). Remember NOT to expose your`api_key_secret` value to anyone. Specific tags can be set as scopes even though they might not exist yet.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1NetworkAuthAgentTokensCreateRequest
*/
func (a *AuthApiService) V1NetworkAuthAgentTokensCreate(ctx context.Context) ApiV1NetworkAuthAgentTokensCreateRequest {
	return ApiV1NetworkAuthAgentTokensCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return V1NetworkAuthAgentTokensCreateResponse
func (a *AuthApiService) V1NetworkAuthAgentTokensCreateExecute(r ApiV1NetworkAuthAgentTokensCreateRequest) (*V1NetworkAuthAgentTokensCreateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *V1NetworkAuthAgentTokensCreateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthApiService.V1NetworkAuthAgentTokensCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/network/auth/agent-tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v1NetworkAuthAgentTokensCreateRequest == nil {
		return localVarReturnValue, nil, reportError("v1NetworkAuthAgentTokensCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v1NetworkAuthAgentTokensCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accessToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V1ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v V1ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1NetworkAuthAgentTokensDeleteRequest struct {
	ctx          context.Context
	ApiService   *AuthApiService
	agentTokenId int32
}

func (r ApiV1NetworkAuthAgentTokensDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1NetworkAuthAgentTokensDeleteExecute(r)
}

/*
V1NetworkAuthAgentTokensDelete Delete Agent Token

Deletes Agent Token.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentTokenId
 @return ApiV1NetworkAuthAgentTokensDeleteRequest
*/
func (a *AuthApiService) V1NetworkAuthAgentTokensDelete(ctx context.Context, agentTokenId int32) ApiV1NetworkAuthAgentTokensDeleteRequest {
	return ApiV1NetworkAuthAgentTokensDeleteRequest{
		ApiService:   a,
		ctx:          ctx,
		agentTokenId: agentTokenId,
	}
}

// Execute executes the request
func (a *AuthApiService) V1NetworkAuthAgentTokensDeleteExecute(r ApiV1NetworkAuthAgentTokensDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthApiService.V1NetworkAuthAgentTokensDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/network/auth/agent-tokens/{agent_token_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_token_id"+"}", url.PathEscape(parameterValueToString(r.agentTokenId, "agentTokenId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agentTokenId < 1 {
		return nil, reportError("agentTokenId must be greater than 1")
	}
	if r.agentTokenId > 2147483647 {
		return nil, reportError("agentTokenId must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accessToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V1ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v V1ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1NetworkAuthAgentTokensGetRequest struct {
	ctx        context.Context
	ApiService *AuthApiService
	skip       *int32
	take       *int32
	order      *string
	filter     *string
}

// Number of tokens to skip.
func (r ApiV1NetworkAuthAgentTokensGetRequest) Skip(skip int32) ApiV1NetworkAuthAgentTokensGetRequest {
	r.skip = &skip
	return r
}

// Limit of returned tokens.
func (r ApiV1NetworkAuthAgentTokensGetRequest) Take(take int32) ApiV1NetworkAuthAgentTokensGetRequest {
	r.take = &take
	return r
}

// string: &#39;ASC&#39; | &#39;DESC&#39;
func (r ApiV1NetworkAuthAgentTokensGetRequest) Order(order string) ApiV1NetworkAuthAgentTokensGetRequest {
	r.order = &order
	return r
}

// Array of agent_token_ids
func (r ApiV1NetworkAuthAgentTokensGetRequest) Filter(filter string) ApiV1NetworkAuthAgentTokensGetRequest {
	r.filter = &filter
	return r
}

func (r ApiV1NetworkAuthAgentTokensGetRequest) Execute() (*V1NetworkAuthAgentTokensGetResponse, *http.Response, error) {
	return r.ApiService.V1NetworkAuthAgentTokensGetExecute(r)
}

/*
V1NetworkAuthAgentTokensGet Get Agent Tokens

Gets a list of all `agent tokens`, filtered and ordered according to the `filter` and `order` (`ASC` or `DESC`) conditions provided in the request. The response may contain fewer results than `take` number. The filter is an array of agent tokens IDs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1NetworkAuthAgentTokensGetRequest
*/
func (a *AuthApiService) V1NetworkAuthAgentTokensGet(ctx context.Context) ApiV1NetworkAuthAgentTokensGetRequest {
	return ApiV1NetworkAuthAgentTokensGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return V1NetworkAuthAgentTokensGetResponse
func (a *AuthApiService) V1NetworkAuthAgentTokensGetExecute(r ApiV1NetworkAuthAgentTokensGetRequest) (*V1NetworkAuthAgentTokensGetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *V1NetworkAuthAgentTokensGetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthApiService.V1NetworkAuthAgentTokensGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/network/auth/agent-tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.skip != nil {
		parameterAddToQuery(localVarQueryParams, "skip", r.skip, "")
	}
	if r.take != nil {
		parameterAddToQuery(localVarQueryParams, "take", r.take, "")
	}
	if r.order != nil {
		parameterAddToQuery(localVarQueryParams, "order", r.order, "")
	}
	if r.filter != nil {
		parameterAddToQuery(localVarQueryParams, "filter", r.filter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["accessToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V1ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v V1ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
