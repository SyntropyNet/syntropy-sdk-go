/*
Syntropy network API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@syntropynet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V1ConnectionStatus the model 'V1ConnectionStatus'
type V1ConnectionStatus string

// List of V1ConnectionStatus
const (
	V1CONNECTIONSTATUS_PENDING       V1ConnectionStatus = "PENDING"
	V1CONNECTIONSTATUS_WARNING       V1ConnectionStatus = "WARNING"
	V1CONNECTIONSTATUS_ERROR         V1ConnectionStatus = "ERROR"
	V1CONNECTIONSTATUS_CONNECTED     V1ConnectionStatus = "CONNECTED"
	V1CONNECTIONSTATUS_NOT_AVAILABLE V1ConnectionStatus = "NOT_AVAILABLE"
	V1CONNECTIONSTATUS_OFFLINE       V1ConnectionStatus = "OFFLINE"
)

// All allowed values of V1ConnectionStatus enum
var AllowedV1ConnectionStatusEnumValues = []V1ConnectionStatus{
	"PENDING",
	"WARNING",
	"ERROR",
	"CONNECTED",
	"NOT_AVAILABLE",
	"OFFLINE",
}

func (v *V1ConnectionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1ConnectionStatus(value)
	for _, existing := range AllowedV1ConnectionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1ConnectionStatus", value)
}

// NewV1ConnectionStatusFromValue returns a pointer to a valid V1ConnectionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1ConnectionStatusFromValue(v string) (*V1ConnectionStatus, error) {
	ev := V1ConnectionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1ConnectionStatus: valid values are %v", v, AllowedV1ConnectionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1ConnectionStatus) IsValid() bool {
	for _, existing := range AllowedV1ConnectionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to V1ConnectionStatus value
func (v V1ConnectionStatus) Ptr() *V1ConnectionStatus {
	return &v
}

type NullableV1ConnectionStatus struct {
	value *V1ConnectionStatus
	isSet bool
}

func (v NullableV1ConnectionStatus) Get() *V1ConnectionStatus {
	return v.value
}

func (v *NullableV1ConnectionStatus) Set(val *V1ConnectionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ConnectionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ConnectionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ConnectionStatus(val *V1ConnectionStatus) *NullableV1ConnectionStatus {
	return &NullableV1ConnectionStatus{value: val, isSet: true}
}

func (v NullableV1ConnectionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ConnectionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
