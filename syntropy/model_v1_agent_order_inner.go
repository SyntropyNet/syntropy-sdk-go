/*
Syntropy network API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@syntropynet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syntropy

import (
	"encoding/json"
	"fmt"
)

// V1AgentOrderInner struct for V1AgentOrderInner
type V1AgentOrderInner struct {
	V1AgentOrderInnerAnyOf  *V1AgentOrderInnerAnyOf
	V1AgentOrderInnerAnyOf1 *V1AgentOrderInnerAnyOf1
	V1AgentOrderInnerAnyOf2 *V1AgentOrderInnerAnyOf2
	V1AgentOrderInnerAnyOf3 *V1AgentOrderInnerAnyOf3
	V1AgentOrderInnerAnyOf4 *V1AgentOrderInnerAnyOf4
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *V1AgentOrderInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into V1AgentOrderInnerAnyOf
	err = json.Unmarshal(data, &dst.V1AgentOrderInnerAnyOf)
	if err == nil {
		jsonV1AgentOrderInnerAnyOf, _ := json.Marshal(dst.V1AgentOrderInnerAnyOf)
		if string(jsonV1AgentOrderInnerAnyOf) == "{}" { // empty struct
			dst.V1AgentOrderInnerAnyOf = nil
		} else {
			return nil // data stored in dst.V1AgentOrderInnerAnyOf, return on the first match
		}
	} else {
		dst.V1AgentOrderInnerAnyOf = nil
	}

	// try to unmarshal JSON data into V1AgentOrderInnerAnyOf1
	err = json.Unmarshal(data, &dst.V1AgentOrderInnerAnyOf1)
	if err == nil {
		jsonV1AgentOrderInnerAnyOf1, _ := json.Marshal(dst.V1AgentOrderInnerAnyOf1)
		if string(jsonV1AgentOrderInnerAnyOf1) == "{}" { // empty struct
			dst.V1AgentOrderInnerAnyOf1 = nil
		} else {
			return nil // data stored in dst.V1AgentOrderInnerAnyOf1, return on the first match
		}
	} else {
		dst.V1AgentOrderInnerAnyOf1 = nil
	}

	// try to unmarshal JSON data into V1AgentOrderInnerAnyOf2
	err = json.Unmarshal(data, &dst.V1AgentOrderInnerAnyOf2)
	if err == nil {
		jsonV1AgentOrderInnerAnyOf2, _ := json.Marshal(dst.V1AgentOrderInnerAnyOf2)
		if string(jsonV1AgentOrderInnerAnyOf2) == "{}" { // empty struct
			dst.V1AgentOrderInnerAnyOf2 = nil
		} else {
			return nil // data stored in dst.V1AgentOrderInnerAnyOf2, return on the first match
		}
	} else {
		dst.V1AgentOrderInnerAnyOf2 = nil
	}

	// try to unmarshal JSON data into V1AgentOrderInnerAnyOf3
	err = json.Unmarshal(data, &dst.V1AgentOrderInnerAnyOf3)
	if err == nil {
		jsonV1AgentOrderInnerAnyOf3, _ := json.Marshal(dst.V1AgentOrderInnerAnyOf3)
		if string(jsonV1AgentOrderInnerAnyOf3) == "{}" { // empty struct
			dst.V1AgentOrderInnerAnyOf3 = nil
		} else {
			return nil // data stored in dst.V1AgentOrderInnerAnyOf3, return on the first match
		}
	} else {
		dst.V1AgentOrderInnerAnyOf3 = nil
	}

	// try to unmarshal JSON data into V1AgentOrderInnerAnyOf4
	err = json.Unmarshal(data, &dst.V1AgentOrderInnerAnyOf4)
	if err == nil {
		jsonV1AgentOrderInnerAnyOf4, _ := json.Marshal(dst.V1AgentOrderInnerAnyOf4)
		if string(jsonV1AgentOrderInnerAnyOf4) == "{}" { // empty struct
			dst.V1AgentOrderInnerAnyOf4 = nil
		} else {
			return nil // data stored in dst.V1AgentOrderInnerAnyOf4, return on the first match
		}
	} else {
		dst.V1AgentOrderInnerAnyOf4 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(V1AgentOrderInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *V1AgentOrderInner) MarshalJSON() ([]byte, error) {
	if src.V1AgentOrderInnerAnyOf != nil {
		return json.Marshal(&src.V1AgentOrderInnerAnyOf)
	}

	if src.V1AgentOrderInnerAnyOf1 != nil {
		return json.Marshal(&src.V1AgentOrderInnerAnyOf1)
	}

	if src.V1AgentOrderInnerAnyOf2 != nil {
		return json.Marshal(&src.V1AgentOrderInnerAnyOf2)
	}

	if src.V1AgentOrderInnerAnyOf3 != nil {
		return json.Marshal(&src.V1AgentOrderInnerAnyOf3)
	}

	if src.V1AgentOrderInnerAnyOf4 != nil {
		return json.Marshal(&src.V1AgentOrderInnerAnyOf4)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableV1AgentOrderInner struct {
	value *V1AgentOrderInner
	isSet bool
}

func (v NullableV1AgentOrderInner) Get() *V1AgentOrderInner {
	return v.value
}

func (v *NullableV1AgentOrderInner) Set(val *V1AgentOrderInner) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AgentOrderInner) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AgentOrderInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AgentOrderInner(val *V1AgentOrderInner) *NullableV1AgentOrderInner {
	return &NullableV1AgentOrderInner{value: val, isSet: true}
}

func (v NullableV1AgentOrderInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AgentOrderInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
