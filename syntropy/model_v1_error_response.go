/*
Syntropy network API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@syntropynet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syntropy

import (
	"encoding/json"
)

// checks if the V1ErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ErrorResponse{}

// V1ErrorResponse struct for V1ErrorResponse
type V1ErrorResponse struct {
	Errors []V1ErrorResponseErrorsInner `json:"errors,omitempty"`
}

// NewV1ErrorResponse instantiates a new V1ErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ErrorResponse() *V1ErrorResponse {
	this := V1ErrorResponse{}
	return &this
}

// NewV1ErrorResponseWithDefaults instantiates a new V1ErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ErrorResponseWithDefaults() *V1ErrorResponse {
	this := V1ErrorResponse{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *V1ErrorResponse) GetErrors() []V1ErrorResponseErrorsInner {
	if o == nil || isNil(o.Errors) {
		var ret []V1ErrorResponseErrorsInner
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ErrorResponse) GetErrorsOk() ([]V1ErrorResponseErrorsInner, bool) {
	if o == nil || isNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *V1ErrorResponse) HasErrors() bool {
	if o != nil && !isNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []V1ErrorResponseErrorsInner and assigns it to the Errors field.
func (o *V1ErrorResponse) SetErrors(v []V1ErrorResponseErrorsInner) {
	o.Errors = v
}

func (o V1ErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableV1ErrorResponse struct {
	value *V1ErrorResponse
	isSet bool
}

func (v NullableV1ErrorResponse) Get() *V1ErrorResponse {
	return v.value
}

func (v *NullableV1ErrorResponse) Set(val *V1ErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ErrorResponse(val *V1ErrorResponse) *NullableV1ErrorResponse {
	return &NullableV1ErrorResponse{value: val, isSet: true}
}

func (v NullableV1ErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
