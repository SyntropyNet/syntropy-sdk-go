/*
Syntropy network API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@syntropynet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syntropy

import (
	"encoding/json"
	"fmt"
)

// V1ConnectionOrderInner - struct for V1ConnectionOrderInner
type V1ConnectionOrderInner struct {
	V1ConnectionOrderInnerOneOf  *V1ConnectionOrderInnerOneOf
	V1ConnectionOrderInnerOneOf1 *V1ConnectionOrderInnerOneOf1
	V1ConnectionOrderInnerOneOf2 *V1ConnectionOrderInnerOneOf2
	V1ConnectionOrderInnerOneOf3 *V1ConnectionOrderInnerOneOf3
}

// V1ConnectionOrderInnerOneOfAsV1ConnectionOrderInner is a convenience function that returns V1ConnectionOrderInnerOneOf wrapped in V1ConnectionOrderInner
func V1ConnectionOrderInnerOneOfAsV1ConnectionOrderInner(v *V1ConnectionOrderInnerOneOf) V1ConnectionOrderInner {
	return V1ConnectionOrderInner{
		V1ConnectionOrderInnerOneOf: v,
	}
}

// V1ConnectionOrderInnerOneOf1AsV1ConnectionOrderInner is a convenience function that returns V1ConnectionOrderInnerOneOf1 wrapped in V1ConnectionOrderInner
func V1ConnectionOrderInnerOneOf1AsV1ConnectionOrderInner(v *V1ConnectionOrderInnerOneOf1) V1ConnectionOrderInner {
	return V1ConnectionOrderInner{
		V1ConnectionOrderInnerOneOf1: v,
	}
}

// V1ConnectionOrderInnerOneOf2AsV1ConnectionOrderInner is a convenience function that returns V1ConnectionOrderInnerOneOf2 wrapped in V1ConnectionOrderInner
func V1ConnectionOrderInnerOneOf2AsV1ConnectionOrderInner(v *V1ConnectionOrderInnerOneOf2) V1ConnectionOrderInner {
	return V1ConnectionOrderInner{
		V1ConnectionOrderInnerOneOf2: v,
	}
}

// V1ConnectionOrderInnerOneOf3AsV1ConnectionOrderInner is a convenience function that returns V1ConnectionOrderInnerOneOf3 wrapped in V1ConnectionOrderInner
func V1ConnectionOrderInnerOneOf3AsV1ConnectionOrderInner(v *V1ConnectionOrderInnerOneOf3) V1ConnectionOrderInner {
	return V1ConnectionOrderInner{
		V1ConnectionOrderInnerOneOf3: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *V1ConnectionOrderInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into V1ConnectionOrderInnerOneOf
	err = newStrictDecoder(data).Decode(&dst.V1ConnectionOrderInnerOneOf)
	if err == nil {
		jsonV1ConnectionOrderInnerOneOf, _ := json.Marshal(dst.V1ConnectionOrderInnerOneOf)
		if string(jsonV1ConnectionOrderInnerOneOf) == "{}" { // empty struct
			dst.V1ConnectionOrderInnerOneOf = nil
		} else {
			match++
		}
	} else {
		dst.V1ConnectionOrderInnerOneOf = nil
	}

	// try to unmarshal data into V1ConnectionOrderInnerOneOf1
	err = newStrictDecoder(data).Decode(&dst.V1ConnectionOrderInnerOneOf1)
	if err == nil {
		jsonV1ConnectionOrderInnerOneOf1, _ := json.Marshal(dst.V1ConnectionOrderInnerOneOf1)
		if string(jsonV1ConnectionOrderInnerOneOf1) == "{}" { // empty struct
			dst.V1ConnectionOrderInnerOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.V1ConnectionOrderInnerOneOf1 = nil
	}

	// try to unmarshal data into V1ConnectionOrderInnerOneOf2
	err = newStrictDecoder(data).Decode(&dst.V1ConnectionOrderInnerOneOf2)
	if err == nil {
		jsonV1ConnectionOrderInnerOneOf2, _ := json.Marshal(dst.V1ConnectionOrderInnerOneOf2)
		if string(jsonV1ConnectionOrderInnerOneOf2) == "{}" { // empty struct
			dst.V1ConnectionOrderInnerOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.V1ConnectionOrderInnerOneOf2 = nil
	}

	// try to unmarshal data into V1ConnectionOrderInnerOneOf3
	err = newStrictDecoder(data).Decode(&dst.V1ConnectionOrderInnerOneOf3)
	if err == nil {
		jsonV1ConnectionOrderInnerOneOf3, _ := json.Marshal(dst.V1ConnectionOrderInnerOneOf3)
		if string(jsonV1ConnectionOrderInnerOneOf3) == "{}" { // empty struct
			dst.V1ConnectionOrderInnerOneOf3 = nil
		} else {
			match++
		}
	} else {
		dst.V1ConnectionOrderInnerOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.V1ConnectionOrderInnerOneOf = nil
		dst.V1ConnectionOrderInnerOneOf1 = nil
		dst.V1ConnectionOrderInnerOneOf2 = nil
		dst.V1ConnectionOrderInnerOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(V1ConnectionOrderInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(V1ConnectionOrderInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src V1ConnectionOrderInner) MarshalJSON() ([]byte, error) {
	if src.V1ConnectionOrderInnerOneOf != nil {
		return json.Marshal(&src.V1ConnectionOrderInnerOneOf)
	}

	if src.V1ConnectionOrderInnerOneOf1 != nil {
		return json.Marshal(&src.V1ConnectionOrderInnerOneOf1)
	}

	if src.V1ConnectionOrderInnerOneOf2 != nil {
		return json.Marshal(&src.V1ConnectionOrderInnerOneOf2)
	}

	if src.V1ConnectionOrderInnerOneOf3 != nil {
		return json.Marshal(&src.V1ConnectionOrderInnerOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *V1ConnectionOrderInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.V1ConnectionOrderInnerOneOf != nil {
		return obj.V1ConnectionOrderInnerOneOf
	}

	if obj.V1ConnectionOrderInnerOneOf1 != nil {
		return obj.V1ConnectionOrderInnerOneOf1
	}

	if obj.V1ConnectionOrderInnerOneOf2 != nil {
		return obj.V1ConnectionOrderInnerOneOf2
	}

	if obj.V1ConnectionOrderInnerOneOf3 != nil {
		return obj.V1ConnectionOrderInnerOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableV1ConnectionOrderInner struct {
	value *V1ConnectionOrderInner
	isSet bool
}

func (v NullableV1ConnectionOrderInner) Get() *V1ConnectionOrderInner {
	return v.value
}

func (v *NullableV1ConnectionOrderInner) Set(val *V1ConnectionOrderInner) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ConnectionOrderInner) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ConnectionOrderInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ConnectionOrderInner(val *V1ConnectionOrderInner) *NullableV1ConnectionOrderInner {
	return &NullableV1ConnectionOrderInner{value: val, isSet: true}
}

func (v NullableV1ConnectionOrderInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ConnectionOrderInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
